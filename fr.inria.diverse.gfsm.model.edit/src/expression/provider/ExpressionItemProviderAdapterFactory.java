/**
 */
package expression.provider;

import expression.util.ExpressionAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ExpressionItemProviderAdapterFactory extends ExpressionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExpressionItemProviderAdapterFactory() {
		this.supportedTypes.add(IEditingDomainItemProvider.class);
		this.supportedTypes.add(IStructuredItemContentProvider.class);
		this.supportedTypes.add(ITreeItemContentProvider.class);
		this.supportedTypes.add(IItemLabelProvider.class);
		this.supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.IntAdd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntAddItemProvider intAddItemProvider;

	/**
	 * This creates an adapter for a {@link expression.IntAdd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntAddAdapter() {
		if (this.intAddItemProvider == null) {
			this.intAddItemProvider = new IntAddItemProvider(this);
		}

		return this.intAddItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.IntMult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntMultItemProvider intMultItemProvider;

	/**
	 * This creates an adapter for a {@link expression.IntMult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntMultAdapter() {
		if (this.intMultItemProvider == null) {
			this.intMultItemProvider = new IntMultItemProvider(this);
		}

		return this.intMultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.IntNeg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntNegItemProvider intNegItemProvider;

	/**
	 * This creates an adapter for a {@link expression.IntNeg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntNegAdapter() {
		if (this.intNegItemProvider == null) {
			this.intNegItemProvider = new IntNegItemProvider(this);
		}

		return this.intNegItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.IntVarRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntVarRefItemProvider intVarRefItemProvider;

	/**
	 * This creates an adapter for a {@link expression.IntVarRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntVarRefAdapter() {
		if (this.intVarRefItemProvider == null) {
			this.intVarRefItemProvider = new IntVarRefItemProvider(this);
		}

		return this.intVarRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.ConstExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstExprItemProvider constExprItemProvider;

	/**
	 * This creates an adapter for a {@link expression.ConstExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstExprAdapter() {
		if (this.constExprItemProvider == null) {
			this.constExprItemProvider = new ConstExprItemProvider(this);
		}

		return this.constExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.IntVarAssign} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntVarAssignItemProvider intVarAssignItemProvider;

	/**
	 * This creates an adapter for a {@link expression.IntVarAssign}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntVarAssignAdapter() {
		if (this.intVarAssignItemProvider == null) {
			this.intVarAssignItemProvider = new IntVarAssignItemProvider(this);
		}

		return this.intVarAssignItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.IntBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntBlockItemProvider intBlockItemProvider;

	/**
	 * This creates an adapter for a {@link expression.IntBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntBlockAdapter() {
		if (this.intBlockItemProvider == null) {
			this.intBlockItemProvider = new IntBlockItemProvider(this);
		}

		return this.intBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.BooleanEqual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanEqualItemProvider booleanEqualItemProvider;

	/**
	 * This creates an adapter for a {@link expression.BooleanEqual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanEqualAdapter() {
		if (this.booleanEqualItemProvider == null) {
			this.booleanEqualItemProvider = new BooleanEqualItemProvider(this);
		}

		return this.booleanEqualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.BooleanOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanOrItemProvider booleanOrItemProvider;

	/**
	 * This creates an adapter for a {@link expression.BooleanOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanOrAdapter() {
		if (this.booleanOrItemProvider == null) {
			this.booleanOrItemProvider = new BooleanOrItemProvider(this);
		}

		return this.booleanOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.BooleanAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanAndItemProvider booleanAndItemProvider;

	/**
	 * This creates an adapter for a {@link expression.BooleanAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanAndAdapter() {
		if (this.booleanAndItemProvider == null) {
			this.booleanAndItemProvider = new BooleanAndItemProvider(this);
		}

		return this.booleanAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link expression.BooleanGreaterThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanGreaterThanItemProvider booleanGreaterThanItemProvider;

	/**
	 * This creates an adapter for a {@link expression.BooleanGreaterThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanGreaterThanAdapter() {
		if (this.booleanGreaterThanItemProvider == null) {
			this.booleanGreaterThanItemProvider = new BooleanGreaterThanItemProvider(this);
		}

		return this.booleanGreaterThanItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(final ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(final Object type) {
		return this.supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(final Notifier notifier, final Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(final Object object, final Object type) {
		if (this.isFactoryForType(type)) {
			final Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || ((Class<?>)type).isInstance(adapter)) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(final INotifyChangedListener notifyChangedListener) {
		this.changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(final INotifyChangedListener notifyChangedListener) {
		this.changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(final Notification notification) {
		this.changeNotifier.fireNotifyChanged(notification);

		if (this.parentAdapterFactory != null) {
			this.parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
