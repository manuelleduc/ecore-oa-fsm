/**
 */
package gfsm.provider;

import gfsm.util.GfsmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GfsmItemProviderAdapterFactory extends GfsmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GfsmItemProviderAdapterFactory() {
		this.supportedTypes.add(IEditingDomainItemProvider.class);
		this.supportedTypes.add(IStructuredItemContentProvider.class);
		this.supportedTypes.add(ITreeItemContentProvider.class);
		this.supportedTypes.add(IItemLabelProvider.class);
		this.supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gfsm.GTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GTransitionItemProvider gTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link gfsm.GTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGTransitionAdapter() {
		if (this.gTransitionItemProvider == null) {
			this.gTransitionItemProvider = new GTransitionItemProvider(this);
		}

		return this.gTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gfsm.GState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GStateItemProvider gStateItemProvider;

	/**
	 * This creates an adapter for a {@link gfsm.GState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGStateAdapter() {
		if (this.gStateItemProvider == null) {
			this.gStateItemProvider = new GStateItemProvider(this);
		}

		return this.gStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gfsm.GInitialState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GInitialStateItemProvider gInitialStateItemProvider;

	/**
	 * This creates an adapter for a {@link gfsm.GInitialState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGInitialStateAdapter() {
		if (this.gInitialStateItemProvider == null) {
			this.gInitialStateItemProvider = new GInitialStateItemProvider(this);
		}

		return this.gInitialStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gfsm.GFinalState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GFinalStateItemProvider gFinalStateItemProvider;

	/**
	 * This creates an adapter for a {@link gfsm.GFinalState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGFinalStateAdapter() {
		if (this.gFinalStateItemProvider == null) {
			this.gFinalStateItemProvider = new GFinalStateItemProvider(this);
		}

		return this.gFinalStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gfsm.GFSM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GFSMItemProvider gfsmItemProvider;

	/**
	 * This creates an adapter for a {@link gfsm.GFSM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGFSMAdapter() {
		if (this.gfsmItemProvider == null) {
			this.gfsmItemProvider = new GFSMItemProvider(this);
		}

		return this.gfsmItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return this.parentAdapterFactory == null ? this : this.parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(final ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(final Object type) {
		return this.supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(final Notifier notifier, final Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(final Object object, final Object type) {
		if (this.isFactoryForType(type)) {
			final Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || ((Class<?>)type).isInstance(adapter)) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(final INotifyChangedListener notifyChangedListener) {
		this.changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(final INotifyChangedListener notifyChangedListener) {
		this.changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(final Notification notification) {
		this.changeNotifier.fireNotifyChanged(notification);

		if (this.parentAdapterFactory != null) {
			this.parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (this.gTransitionItemProvider != null) {
			this.gTransitionItemProvider.dispose();
		}
		if (this.gStateItemProvider != null) {
			this.gStateItemProvider.dispose();
		}
		if (this.gInitialStateItemProvider != null) {
			this.gInitialStateItemProvider.dispose();
		}
		if (this.gFinalStateItemProvider != null) {
			this.gFinalStateItemProvider.dispose();
		}
		if (this.gfsmItemProvider != null) {
			this.gfsmItemProvider.dispose();
		}
	}

}
